
-- <<< Дропы таблиц и функций>>>
DROP FUNCTION IF EXISTS Insert_To_CSV(filepath text, new_delimeter char);
DROP FUNCTION IF EXISTS Insert_From_CSV(filepath text, new_delimeter char);
DROP TABLE IF EXISTS Tasks CASCADE;
DROP TABLE IF EXISTS P2P;
DROP TABLE IF EXISTS Verter;
DROP TABLE IF EXISTS TransferredPoints;
DROP TABLE IF EXISTS Friends;
DROP TABLE IF EXISTS Recommendations;
DROP TABLE IF EXISTS XP;
DROP TABLE IF EXISTS TimeTracking;
DROP TABLE IF EXISTS Checks;
DROP TABLE IF EXISTS Peers;

SET datestyle TO ISO,YMD;

-- <<< Создание таблиц >>>

CREATE TABLE Peers
(
    Nickname varchar NOT NULL PRIMARY KEY,
    Birthday date NOT NULL
);


CREATE TABLE Tasks
(
    Title      varchar NOT NULL PRIMARY KEY,
    ParentTask varchar DEFAULT NULL, CONSTRAINT fk_Tasks_ParentTask FOREIGN KEY (Title) REFERENCES Tasks (Title),
    MaxXP      integer NOT NULL
);

CREATE TABLE Checks
(
    ID   bigint GENERATED BY DEFAULT AS IDENTITY (START WITH 1 INCREMENT BY 1 NO MAXVALUE) PRIMARY KEY,
    Peer varchar NOT NULL, CONSTRAINT fk_Checks_Peer_Peers FOREIGN KEY (Peer) REFERENCES Peers (Nickname),
    Task varchar NOT NULL, CONSTRAINT fk_Checks_Tasks_Title FOREIGN KEY (Task) REFERENCES Tasks (Title),
    Date date NOT NULL
);

CREATE TABLE P2P
(
    ID           bigint GENERATED BY DEFAULT AS IDENTITY (START WITH 1 INCREMENT BY 1 NO MAXVALUE) PRIMARY KEY,
    CheckID      bigint  NOT NULL,
    CheckingPeer varchar NOT NULL,
    State        varchar NOT NULL,
    Time         time    NOT NULL,
    CONSTRAINT enumeration_State CHECK (State = 'Start' OR State = 'Success' OR State = 'Failure'),
    CONSTRAINT fk_P2P_CheckID_Checks FOREIGN KEY (CheckID) REFERENCES Checks (ID),
    CONSTRAINT fk_P2P_CheckingPeer_Peers FOREIGN KEY (CheckingPeer) REFERENCES Peers (Nickname)
);
--
CREATE TABLE Verter
(
    ID      bigint GENERATED BY DEFAULT AS IDENTITY (START WITH 1 INCREMENT BY 1 NO MAXVALUE) PRIMARY KEY,
    CheckID bigint  NOT NULL,
    State   varchar NOT NULL,
    Time    time    NOT NULL,
    CONSTRAINT enumeration_State CHECK (State = 'Start' OR State = 'Success' OR State = 'Failure'),
    CONSTRAINT fk_Verter_CheckID_Checks FOREIGN KEY (CheckID) REFERENCES Checks (ID)
);

CREATE TABLE XP
(
    ID       bigint GENERATED BY DEFAULT AS IDENTITY (START WITH 1 INCREMENT BY 1 NO MAXVALUE) PRIMARY KEY,
    CheckID  bigint NOT NULL,
    XPAmount integer,
    CONSTRAINT fk_XP_CheckID_Checks FOREIGN KEY (CheckID) REFERENCES Checks (ID)
);

CREATE TABLE Friends
(
    ID    bigint GENERATED BY DEFAULT AS IDENTITY (START WITH 1 INCREMENT BY 1 NO MAXVALUE) PRIMARY KEY,
    Peer1 varchar NOT NULL,
    Peer2 varchar NOT NULL,
    CONSTRAINT fk_Friends_Peer1_Peers FOREIGN KEY (Peer1) REFERENCES Peers (Nickname),
    CONSTRAINT fk_Friends_Peer2_Peers FOREIGN KEY (Peer2) REFERENCES Peers (Nickname)
);

CREATE TABLE Recommendations
(
    ID              bigint GENERATED BY DEFAULT AS IDENTITY (START WITH 1 INCREMENT BY 1 NO MAXVALUE) PRIMARY KEY,
    Peer            varchar NOT NULL,
    RecommendedPeer varchar NOT NULL,
    CONSTRAINT fk_Recommendations_Peer_Peers FOREIGN KEY (Peer) REFERENCES Peers (Nickname),
    CONSTRAINT fk_Recommendations_RecommendedPeer_Peers FOREIGN KEY (RecommendedPeer) REFERENCES Peers (Nickname)
);
--
CREATE TABLE TransferredPoints
(
    ID           bigint GENERATED BY DEFAULT AS IDENTITY (START WITH 1 INCREMENT BY 1 NO MAXVALUE) PRIMARY KEY,
    CheckingPeer varchar NOT NULL,
    CheckedPeer  varchar NOT NULL,
    PointsAmount integer NOT NULL,
    CONSTRAINT fk_TransferredPoints_CheckingPeer_Peers FOREIGN KEY (CheckingPeer) REFERENCES Peers (Nickname),
    CONSTRAINT fk_TransferredPoints_CheckedPeer_Peers FOREIGN KEY (CheckedPeer) REFERENCES Peers (Nickname),
    UNIQUE (CheckingPeer, CheckedPeer)
);

CREATE TABLE TimeTracking
(
    ID    bigint GENERATED BY DEFAULT AS IDENTITY (START WITH 1 INCREMENT BY 1 NO MAXVALUE) PRIMARY KEY,
    Peer  varchar NOT NULL,
    Date  date    NOT NULL,
    Time  time    NOT NULL,
    State integer CHECK (State = 1 OR State = 2) DEFAULT 2,
    CONSTRAINT fk_TimeTracking_Peer_Peers FOREIGN KEY (Peer) REFERENCES Peers (Nickname)
);

--                                                                 <<< Import from .csv >>>
CREATE FUNCTION Insert_From_CSV(filepath text, new_delimeter char) RETURNS void AS
$$
    DECLARE cp_cmd text;
    BEGIN
        cp_cmd :=
    'COPY Peers(nickname, birthday)
    FROM ' || quote_literal(filepath || 'peers.csv') ||
    'DELIMITER' || '''' || new_delimeter || '''' ||
    'CSV HEADER';
        EXECUTE cp_cmd;
                cp_cmd :=
    'COPY Tasks (Title, ParentTask, MaxXP)
    FROM ' || quote_literal(filepath || 'tasks.csv') ||
    'DELIMITER' || '''' || new_delimeter || '''' ||
    'CSV HEADER';
        EXECUTE cp_cmd;
        cp_cmd :=
    'COPY Checks(Peer, Task, Date)
    FROM ' || quote_literal(filepath || 'checks.csv') ||
    'DELIMITER' || '''' || new_delimeter || '''' ||
    'CSV HEADER';
        EXECUTE cp_cmd;
        cp_cmd :=
    'COPY P2P(CheckID, CheckingPeer, State, Time)
    FROM ' || quote_literal(filepath || 'p2p.csv') ||
    'DELIMITER' || '''' || new_delimeter || '''' ||
    'CSV HEADER';
        EXECUTE cp_cmd;
                cp_cmd :=
    'COPY Verter(CheckID, State, Time)
    FROM ' || quote_literal(filepath || 'verter.csv') ||
    'DELIMITER' || '''' || new_delimeter || '''' ||
    'CSV HEADER';
        EXECUTE cp_cmd;
        cp_cmd :=
    'COPY XP(CheckID, XPAmount)
    FROM ' || quote_literal(filepath || 'xp.csv') ||
    'DELIMITER' || '''' || new_delimeter || '''' ||
    'CSV HEADER';
        EXECUTE cp_cmd;
        cp_cmd :=
    'COPY Friends(Peer1, Peer2)
    FROM ' || quote_literal(filepath || 'friends.csv') ||
    'DELIMITER' || '''' || new_delimeter || '''' ||
    'CSV HEADER';
        EXECUTE cp_cmd;
                cp_cmd :=
    'COPY Recommendations(Peer, RecommendedPeer)
    FROM ' || quote_literal(filepath || 'recommendations.csv') ||
    'DELIMITER' || '''' || new_delimeter || '''' ||
    'CSV HEADER';
        EXECUTE cp_cmd;
        cp_cmd :=
    'COPY TransferredPoints(CheckingPeer, CheckedPeer, PointsAmount)
    FROM ' || quote_literal(filepath || 'transferredpoints.csv') ||
    'DELIMITER' || '''' || new_delimeter || '''' ||
    'CSV HEADER';
        EXECUTE cp_cmd;
        cp_cmd :=
    'COPY TimeTracking(Peer, Date, Time, State)
    FROM ' || quote_literal(filepath || 'timetracking.csv') ||
    'DELIMITER' || '''' || new_delimeter || '''' ||
    'CSV HEADER';
        EXECUTE cp_cmd;
    END;
$$
    LANGUAGE plpgsql;
SELECT Insert_From_CSV('/Users/mzoraida/SQL2_Info21_v1.0-0/src/import_csv/', ',');



CREATE FUNCTION Insert_To_CSV(filepath text, new_delimeter char) RETURNS void AS
$$
    DECLARE cp_cmd text;
    BEGIN
        cp_cmd :=
    'COPY (SELECT * FROM Peers)
    TO ' || quote_literal(filepath || 'peers.csv') ||
    'DELIMITER' || '''' || new_delimeter || '''' ||
    'CSV HEADER';
        EXECUTE cp_cmd;
        cp_cmd :=
    'COPY (SELECT * FROM Checks)
    TO ' || quote_literal(filepath || 'checks.csv') ||
    'DELIMITER' || '''' || new_delimeter || '''' ||
    'CSV HEADER';
        EXECUTE cp_cmd;
        cp_cmd :=
    'COPY (SELECT * FROM P2P)
    TO ' || quote_literal(filepath || 'p2p.csv') ||
    'DELIMITER' || '''' || new_delimeter || '''' ||
    'CSV HEADER';
        EXECUTE cp_cmd;
        cp_cmd :=
    'COPY (SELECT * FROM Friends)
    TO ' || quote_literal(filepath || 'friends.csv') ||
    'DELIMITER' || '''' || new_delimeter || '''' ||
    'CSV HEADER';
        EXECUTE cp_cmd;
        cp_cmd :=
    'COPY (SELECT * FROM Recommendations)
    TO ' || quote_literal(filepath || 'recommendations.csv') ||
    'DELIMITER' || '''' || new_delimeter || '''' ||
    'CSV HEADER';
        EXECUTE cp_cmd;
        cp_cmd :=
    'COPY (SELECT * FROM TransferredPoints)
    TO ' || quote_literal(filepath || 'transferredpoints.csv') ||
    'DELIMITER' || '''' || new_delimeter || '''' ||
    'CSV HEADER';
        EXECUTE cp_cmd;
        cp_cmd :=
    'COPY (SELECT * FROM TimeTracking)
    TO ' || quote_literal(filepath || 'timetracking.csv') ||
    'DELIMITER' || '''' || new_delimeter || '''' ||
    'CSV HEADER';
        EXECUTE cp_cmd;
        cp_cmd :=
    'COPY (SELECT * FROM Verter)
    TO ' || quote_literal(filepath || 'verter.csv') ||
    'DELIMITER' || '''' || new_delimeter || '''' ||
    'CSV HEADER';
        EXECUTE cp_cmd;
        cp_cmd :=
    'COPY (SELECT * FROM XP)
    TO ' || quote_literal(filepath || 'xp.csv') ||
    'DELIMITER' || '''' || new_delimeter || '''' ||
    'CSV HEADER';
        EXECUTE cp_cmd;
        cp_cmd :=
    'COPY (SELECT * FROM Tasks)
    TO ' || quote_literal(filepath || 'tasks.csv') ||
    'DELIMITER' || '''' || new_delimeter || '''' ||
    'CSV HEADER';
        EXECUTE cp_cmd;
    END;
$$
    LANGUAGE plpgsql;
SELECT Insert_To_CSV('/Users/mzoraida/SQL2_Info21_v1.0-0/src/export_csv/', ',');
